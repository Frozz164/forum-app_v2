{"ast":null,"code":"import axios from 'axios';\nconst API_BASE = 'http://localhost:8080/api/v1';\nconst FORUM_API = 'http://localhost:8081/api';\n\n// Создаем экземпляры axios\nconst apiClient = axios.create({\n  baseURL: API_BASE,\n  withCredentials: true,\n  timeout: 10000\n});\nconst forumClient = axios.create({\n  baseURL: FORUM_API,\n  timeout: 10000\n});\n\n// Интерсептор для автоматической добавки токена\nforumClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Обработка ошибок\nconst handleError = error => {\n  if (error.response) {\n    console.error('API Error:', error.response.data);\n    throw new Error(error.response.data.error || 'Request failed');\n  } else {\n    console.error('Network Error:', error.message);\n    throw new Error('Network error. Please try again.');\n  }\n};\n\n// Экспортируемые методы\nexport const authAPI = {\n  register: userData => apiClient.post('/register', userData),\n  login: credentials => apiClient.post('/login', credentials)\n};\nexport const forumAPI = {\n  getPosts: () => forumClient.get('/posts'),\n  createPost: postData => forumClient.post('/posts', postData),\n  deletePost: postId => forumClient.delete(`/posts/${postId}`)\n};\n\n// Старые методы для совместимости\nexport const registerUser = userData => authAPI.register(userData);\nexport const loginUser = credentials => authAPI.login(credentials);\nexport const getPosts = () => forumAPI.getPosts();\nexport const createPost = postData => forumAPI.createPost(postData);\nexport const deletePost = postId => forumAPI.deletePost(postId);","map":{"version":3,"names":["axios","API_BASE","FORUM_API","apiClient","create","baseURL","withCredentials","timeout","forumClient","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","handleError","error","response","console","data","Error","message","authAPI","register","userData","post","login","credentials","forumAPI","getPosts","get","createPost","postData","deletePost","postId","delete","registerUser","loginUser"],"sources":["E:/forum-app_v2/forum-react-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE = 'http://localhost:8080/api/v1';\r\nconst FORUM_API = 'http://localhost:8081/api';\r\n\r\n// Создаем экземпляры axios\r\nconst apiClient = axios.create({\r\n    baseURL: API_BASE,\r\n    withCredentials: true,\r\n    timeout: 10000\r\n});\r\n\r\nconst forumClient = axios.create({\r\n    baseURL: FORUM_API,\r\n    timeout: 10000\r\n});\r\n\r\n// Интерсептор для автоматической добавки токена\r\nforumClient.interceptors.request.use(config => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n});\r\n\r\n// Обработка ошибок\r\nconst handleError = (error) => {\r\n    if (error.response) {\r\n        console.error('API Error:', error.response.data);\r\n        throw new Error(error.response.data.error || 'Request failed');\r\n    } else {\r\n        console.error('Network Error:', error.message);\r\n        throw new Error('Network error. Please try again.');\r\n    }\r\n};\r\n\r\n// Экспортируемые методы\r\nexport const authAPI = {\r\n    register: (userData) => apiClient.post('/register', userData),\r\n    login: (credentials) => apiClient.post('/login', credentials)\r\n};\r\n\r\nexport const forumAPI = {\r\n    getPosts: () => forumClient.get('/posts'),\r\n    createPost: (postData) => forumClient.post('/posts', postData),\r\n    deletePost: (postId) => forumClient.delete(`/posts/${postId}`)\r\n};\r\n\r\n// Старые методы для совместимости\r\nexport const registerUser = (userData) => authAPI.register(userData);\r\nexport const loginUser = (credentials) => authAPI.login(credentials);\r\nexport const getPosts = () => forumAPI.getPosts();\r\nexport const createPost = (postData) => forumAPI.createPost(postData);\r\nexport const deletePost = (postId) => forumAPI.deletePost(postId);"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,8BAA8B;AAC/C,MAAMC,SAAS,GAAG,2BAA2B;;AAE7C;AACA,MAAMC,SAAS,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC3BC,OAAO,EAAEJ,QAAQ;EACjBK,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;AACb,CAAC,CAAC;AAEF,MAAMC,WAAW,GAAGR,KAAK,CAACI,MAAM,CAAC;EAC7BC,OAAO,EAAEH,SAAS;EAClBK,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACAC,WAAW,CAACC,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EAC3C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,CAAC;;AAEF;AACA,MAAMM,WAAW,GAAIC,KAAK,IAAK;EAC3B,IAAIA,KAAK,CAACC,QAAQ,EAAE;IAChBC,OAAO,CAACF,KAAK,CAAC,YAAY,EAAEA,KAAK,CAACC,QAAQ,CAACE,IAAI,CAAC;IAChD,MAAM,IAAIC,KAAK,CAACJ,KAAK,CAACC,QAAQ,CAACE,IAAI,CAACH,KAAK,IAAI,gBAAgB,CAAC;EAClE,CAAC,MAAM;IACHE,OAAO,CAACF,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACK,OAAO,CAAC;IAC9C,MAAM,IAAID,KAAK,CAAC,kCAAkC,CAAC;EACvD;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,OAAO,GAAG;EACnBC,QAAQ,EAAGC,QAAQ,IAAKxB,SAAS,CAACyB,IAAI,CAAC,WAAW,EAAED,QAAQ,CAAC;EAC7DE,KAAK,EAAGC,WAAW,IAAK3B,SAAS,CAACyB,IAAI,CAAC,QAAQ,EAAEE,WAAW;AAChE,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG;EACpBC,QAAQ,EAAEA,CAAA,KAAMxB,WAAW,CAACyB,GAAG,CAAC,QAAQ,CAAC;EACzCC,UAAU,EAAGC,QAAQ,IAAK3B,WAAW,CAACoB,IAAI,CAAC,QAAQ,EAAEO,QAAQ,CAAC;EAC9DC,UAAU,EAAGC,MAAM,IAAK7B,WAAW,CAAC8B,MAAM,CAAC,UAAUD,MAAM,EAAE;AACjE,CAAC;;AAED;AACA,OAAO,MAAME,YAAY,GAAIZ,QAAQ,IAAKF,OAAO,CAACC,QAAQ,CAACC,QAAQ,CAAC;AACpE,OAAO,MAAMa,SAAS,GAAIV,WAAW,IAAKL,OAAO,CAACI,KAAK,CAACC,WAAW,CAAC;AACpE,OAAO,MAAME,QAAQ,GAAGA,CAAA,KAAMD,QAAQ,CAACC,QAAQ,CAAC,CAAC;AACjD,OAAO,MAAME,UAAU,GAAIC,QAAQ,IAAKJ,QAAQ,CAACG,UAAU,CAACC,QAAQ,CAAC;AACrE,OAAO,MAAMC,UAAU,GAAIC,MAAM,IAAKN,QAAQ,CAACK,UAAU,CAACC,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}